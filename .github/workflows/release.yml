name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation

      - name: Determine tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          VERSION="${TAG#v}"
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Release tag: $TAG (version: $VERSION)"

      - name: Validate tag format
        run: |
          TAG="${{ steps.tag.outputs.TAG }}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Error: Invalid tag format: $TAG"
            echo "Expected format: vX.Y.Z or vX.Y.Z-prerelease"
            exit 1
          fi
          echo "Tag format validated: $TAG"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build release package
        run: |
          dotnet build --configuration Release --no-restore /p:Version=${{ steps.tag.outputs.VERSION }}
          dotnet pack src/HeroSdJwt.csproj \
            --configuration Release \
            --no-build \
            --output ./release-packages \
            /p:PackageVersion=${{ steps.tag.outputs.VERSION }} \
            /p:IncludeSymbols=true \
            /p:SymbolPackageFormat=snupkg

      - name: Get previous tag
        id: previoustag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.tag.outputs.TAG }}^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using first commit"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag/commit: $PREV_TAG"

      - name: Generate changelog
        id: changelog
        run: |
          PREV="${{ steps.previoustag.outputs.PREV_TAG }}"
          CURRENT="${{ steps.tag.outputs.TAG }}"

          echo "Generating changelog from $PREV to $CURRENT..."

          # Generate changelog content
          {
            echo "## What's Changed"
            echo ""

            # Get commits grouped by type
            FEATURES=$(git log $PREV..$CURRENT --pretty=format:"- %s (%h)" --grep="^feat" --grep="^feature" -i || true)
            FIXES=$(git log $PREV..$CURRENT --pretty=format:"- %s (%h)" --grep="^fix" -i || true)
            DOCS=$(git log $PREV..$CURRENT --pretty=format:"- %s (%h)" --grep="^docs" -i || true)
            TESTS=$(git log $PREV..$CURRENT --pretty=format:"- %s (%h)" --grep="^test" -i || true)
            CHORES=$(git log $PREV..$CURRENT --pretty=format:"- %s (%h)" --grep="^chore" -i || true)
            OTHER=$(git log $PREV..$CURRENT --pretty=format:"- %s (%h)" --grep="^feat" --grep="^fix" --grep="^docs" --grep="^test" --grep="^chore" --invert-grep -i || true)

            if [ -n "$FEATURES" ]; then
              echo "### Features"
              echo "$FEATURES"
              echo ""
            fi

            if [ -n "$FIXES" ]; then
              echo "### Bug Fixes"
              echo "$FIXES"
              echo ""
            fi

            if [ -n "$DOCS" ]; then
              echo "### Documentation"
              echo "$DOCS"
              echo ""
            fi

            if [ -n "$TESTS" ]; then
              echo "### Tests"
              echo "$TESTS"
              echo ""
            fi

            if [ -n "$CHORES" ]; then
              echo "### Chores & Maintenance"
              echo "$CHORES"
              echo ""
            fi

            if [ -n "$OTHER" ]; then
              echo "### Other Changes"
              echo "$OTHER"
              echo ""
            fi

            # Add contributors
            CONTRIBUTORS=$(git log $PREV..$CURRENT --pretty=format:"%an" | sort -u | sed 's/^/- @/' | tr '\n' ' ' || true)
            if [ -n "$CONTRIBUTORS" ]; then
              echo "### Contributors"
              echo "$CONTRIBUTORS"
              echo ""
            fi

            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV...$CURRENT"
          } > CHANGELOG.md

          cat CHANGELOG.md

          # Save for release notes
          echo "CHANGELOG_FILE=CHANGELOG.md" >> $GITHUB_OUTPUT

      - name: Check for existing release
        id: check_release
        run: |
          if gh release view ${{ steps.tag.outputs.TAG }} &>/dev/null; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.tag.outputs.TAG }} already exists"
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.tag.outputs.TAG }} does not exist"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create GitHub Release
        if: steps.check_release.outputs.EXISTS == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.TAG }}
          name: Release ${{ steps.tag.outputs.TAG }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.TAG, '-') }}
          files: |
            ./release-packages/*.nupkg
            ./release-packages/*.snupkg
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update existing release
        if: steps.check_release.outputs.EXISTS == 'true'
        run: |
          echo "Release already exists. Updating with new assets..."
          gh release upload ${{ steps.tag.outputs.TAG }} ./release-packages/*.nupkg ./release-packages/*.snupkg --clobber
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create release summary
        run: |
          echo "## Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ steps.tag.outputs.TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.tag.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "The release has been created. To publish to NuGet.org:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to the [release page](https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.TAG }})" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify the release notes" >> $GITHUB_STEP_SUMMARY
          echo "3. The publish workflow will automatically trigger" >> $GITHUB_STEP_SUMMARY
