name: CI

on:
  push:
    branches: [ main, develop, 'claude/**' ]
    tags: [ 'v*' ]  # Run on version tags for artifact generation
  pull_request:
    branches: [ main, develop ]
  merge_group:

# Cancel in-progress runs for the same workflow and ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write  # Allow committing generated lock files
  checks: write
  pull-requests: write
  security-events: write  # For dependency review

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ['8.0.x', '9.0.x']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for Source Link

    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        cache: false  # Disabled until packages.lock.json is generated

    - name: Restore dependencies
      run: dotnet restore

    - name: Check for new lock files
      id: lock-files
      if: matrix.os == 'ubuntu-latest' && matrix.dotnet-version == '9.0.x' && github.event_name == 'push'
      run: |
        if git diff --name-only | grep -q "packages.lock.json"; then
          echo "LOCK_FILES_GENERATED=true" >> $GITHUB_OUTPUT
          echo "Lock files were generated"
          git diff --name-only | grep "packages.lock.json"
        else
          echo "LOCK_FILES_GENERATED=false" >> $GITHUB_OUTPUT
          echo "No new lock files generated"
        fi

    - name: Commit lock files
      if: steps.lock-files.outputs.LOCK_FILES_GENERATED == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add '**/packages.lock.json'
        git commit -m "$(cat <<'EOF'
        chore: add generated NuGet lock files

        These lock files were automatically generated by Directory.Build.props configuration.
        They ensure reproducible builds by locking dependency versions.

        [skip ci]
        EOF
        )"
        git push

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" --results-directory ./TestResults

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always() && runner.os == 'Linux' && matrix.dotnet-version == '9.0.x'
      with:
        files: 'TestResults/**/*.trx'
        check_name: 'Test Results (${{ matrix.os }} - .NET ${{ matrix.dotnet-version }})'

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.dotnet-version }}
        path: TestResults/**/*.trx
        retention-days: 30

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.dotnet-version == '9.0.x'
      uses: codecov/codecov-action@v4
      with:
        files: 'TestResults/**/coverage.cobertura.xml'
        fail_ci_if_error: false
        flags: unittests
        name: codecov-${{ matrix.os }}

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        cache: false  # Disabled until packages.lock.json is generated

    - name: Restore dependencies
      run: dotnet restore

    - name: Build (with warnings as errors)
      run: dotnet build --configuration Release --no-restore /p:TreatWarningsAsErrors=true

    - name: Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic

  pack:
    name: Pack NuGet
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        cache: false  # Disabled until packages.lock.json is generated

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Pack
      run: |
        dotnet pack src/HeroSdJwt/HeroSdJwt.csproj \
          --configuration Release \
          --no-build \
          --output ./artifacts \
          /p:IncludeSymbols=true \
          /p:SymbolPackageFormat=snupkg

    - name: Upload NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages-${{ github.sha }}
        path: |
          ./artifacts/*.nupkg
          ./artifacts/*.snupkg
        retention-days: 90
        if-no-files-found: error

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: high
        deny-licenses: GPL-2.0, GPL-3.0, AGPL-3.0
        comment-summary-in-pr: always
